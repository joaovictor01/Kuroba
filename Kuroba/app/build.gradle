apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'de.undercouch.download'

android {
    // !!! IMPORTANT !!!
    // When changing any of the following: compileSdkVersion, targetSdkVersion, buildToolsVersion
    // don't forget to also update the github workflow
    // !!! IMPORTANT !!!

    compileSdkVersion 29

    def getCommitHash = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29

        /**
         * ------------------------------------------------------------
         *
         *              CHANGE PER RELEASE BUILD
         *              SEE docs/release.txt FOR INFO
         *
         * ------------------------------------------------------------
         */
        //bump the MAJOR (XX) version when there are incompatible changes between versions
        //or major changes to the application that would require a reinstall
        //bump the MINOR (YY) version when there are compatible changes between versions (ie database changes)
        //or if there are big application level changes like tearing out/adding major features
        //bump the PATCH (ZZ) version otherwise, for anything small
        int major = 4
        int minor = 13
        int patch = 6

        /**
         * ------------------------------------------------------------
         *
         *              CHANGE PER NEW FORK MODIFICATION
         *              IF AND ONLY IF NECESSARY
         *
         * ------------------------------------------------------------
         */
        //if you change this, also change the AndroidManifest package
        applicationId "com.github.adamantcheese.chan"
        //ALL ENDPOINTS SHOULD BE HTTPS

        //CHANGE THESE TO YOUR GITHUB REPOSITORY
        //the repo endpoint is also used to calculate the issues endpoint
        //the resources endpoint is for any static resources; currently this is mostly used for various images used internally,
        //but using a remote resource works easier with the application architecture than using a local resource/drawable
        buildConfigField "String", "GITHUB_ENDPOINT", "\"https://github.com/Adamantcheese/Kuroba\""
        buildConfigField "String", "UPDATE_API_ENDPOINT", "\"https://api.github.com/repos/Adamantcheese/Kuroba/releases/latest\""
        buildConfigField "String", "RESOURCES_ENDPOINT", "\"https://raw.githubusercontent.com/Adamantcheese/Kuroba/multi-feature/docs/\""
        //this is for your development server endpoint
        //you WILL need to change the code in UpdateManager if your endpoint changes or you use a different API structure
        buildConfigField "String", "DEV_GITHUB_ENDPOINT", "\"https://github.com/Adamantcheese/Kuroba-Dev\""
        buildConfigField "String", "DEV_API_ENDPOINT", "\"https://api.github.com/repos/Adamantcheese/Kuroba-Dev/releases/latest\""

        /**
         * ------------------------------------------------------------
         *
         *              DON'T CHANGE THESE AUTO-CALCULATIONS
         *              USED FOR VERSION CODE GENERATION
         *              USED FOR VERSION NAME GENERATION
         *              USED FOR AUTO UPDATER NAMING CONSISTENCY
         *
         * ------------------------------------------------------------
         */
        versionCode major * 10000 + minor * 100 + patch
        versionName "v" + major + "." + minor + "." + patch

        buildConfigField "String", "COMMIT_HASH", "\"" + getCommitHash() + "\""

        renderscriptTargetApi 21
        renderscriptSupportModeEnabled true
    }

    compileOptions {
        encoding = 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }

    lintOptions {
        abortOnError false
        disable 'UseSwitchCompatOrMaterialCode'
    }

    packagingOptions {
        exclude 'META-INF/*'
    }

    flavorDimensions "default"

    productFlavors {
        stable {
            dimension "default"
            applicationIdSuffix ""
            versionNameSuffix ""

            // These are manifest placeholders for the application name, icon location and file
            // provider authority (the file provider authority should differ for different flavors
            // otherwise the app will not work)
            manifestPlaceholders = [
                    appName              : "Kuroba",
                    fileProviderAuthority: "${defaultConfig.applicationId}${applicationIdSuffix}.fileprovider",
                    devBuild             : false
            ]

            buildConfigField "boolean", "DEV_BUILD", "${manifestPlaceholders["devBuild"]}"
            buildConfigField "int", "UPDATE_DELAY", "5"
            buildConfigField "String", "FILE_PROVIDER", "\"${manifestPlaceholders["fileProviderAuthority"]}\""
            buildConfigField "String", "APP_LABEL", "\"${manifestPlaceholders["appName"]}\""
        }
        dev {
            dimension "default"
            // Different app ids for different flavors so that the users are able to install both
            // of them without deleting anything
            applicationIdSuffix ".dev"
            versionNameSuffix "-${getCommitHash().substring(0, 8)}"

            // The same as in stable flavor
            manifestPlaceholders = [
                    appName              : "Kuroba-dev",
                    fileProviderAuthority: "${defaultConfig.applicationId}${applicationIdSuffix}.fileprovider",
                    devBuild             : true
            ]

            // To easily figure out whether the app uses development flavors or not
            buildConfigField "boolean", "DEV_BUILD", "${manifestPlaceholders["devBuild"]}"
            buildConfigField "int", "UPDATE_DELAY", "1"
            buildConfigField "String", "FILE_PROVIDER", "\"${manifestPlaceholders["fileProviderAuthority"]}\""
            buildConfigField "String", "APP_LABEL", "\"${manifestPlaceholders["appName"]}\""
        }
    }

    buildTypes {
        applicationVariants.all { variant ->
            variant.outputs.all {
                android.productFlavors.all { flavor ->
                    if (flavor.name == variant.flavorName) {
                        outputFileName = flavor.manifestPlaceholders.get("appName").toString() + ".apk"
                    }
                }
            }
        }

        release {
            /*
            If you want to sign releases without using "Generate Signed APK", make a file in app/keys.properties with the following content:
            keystoreFile=yourkey.store
            keystorePass=pass
            keyAlias=alias
            keyPass=pass
            */
            // Just select your build variant (debug/release) and do Build -> APK
            File f = file('keys.properties')
            if (f.exists()) {
                Properties props = new Properties()
                InputStream is = new FileInputStream(f)
                props.load(is)

                signingConfigs {
                    release {
                        storeFile file(props['keystoreFile'])
                        storePassword props['keystorePass']
                        keyAlias props['keyAlias']
                        keyPassword props['keyPass']
                    }
                }

                is.close()
                signingConfig signingConfigs.release
            }

            shrinkResources true
            minifyEnabled true
            proguardFiles 'proguard.cfg'
            debuggable false
        }
        debug {
            File f = file('debug.properties')
            if (f.exists()) {
                Properties props = new Properties()
                InputStream is = new FileInputStream(f)
                props.load(is)

                signingConfigs {
                    debug {
                        storeFile file(props['keystoreFile'])
                        storePassword props['keystorePass']
                        keyAlias props['keyAlias']
                        keyPassword props['keyPass']
                    }
                }

                is.close()
                signingConfig signingConfigs.debug
            }

            // if you want to use certain not normally used methods in the IDE's debugger, you'll have to disable these
            // because otherwise they'll be stripped out and will throw MethodNotFoundExceptions
            shrinkResources true
            minifyEnabled true
            proguardFiles 'proguard.cfg'
            debuggable true
        }
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.browser:browser:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'androidx.drawerlayout:drawerlayout:1.1.1'
    implementation 'androidx.exifinterface:exifinterface:1.3.3'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.slidingpanelayout:slidingpanelayout:1.1.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'com.google.android.material:material:1.4.0'
    // good reference for all the icons https://bennymeg.github.io/ngx-fluent-ui/
    implementation 'com.microsoft.design:fluent-system-icons:1.1.127@aar'
    implementation 'com.github.skydoves:balloon:1.3.4'

    implementation 'com.google.android.exoplayer:exoplayer-core:2.15.0'
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.15.0'
    implementation 'com.google.android.exoplayer:extension-okhttp:2.15.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'

    implementation 'com.j256.ormlite:ormlite-core:5.3'
    implementation 'com.j256.ormlite:ormlite-android:5.3'
    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.23'
    implementation 'org.greenrobot:eventbus:3.2.0'
    implementation 'org.nibor.autolink:autolink:0.10.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'me.xdrop:fuzzywuzzy:1.3.1'
    // this is a fixed version of feather that doesn't swallow exceptions
    implementation 'com.github.imperial-crystalline-recursion:feather:master-SNAPSHOT'
    implementation 'com.vladsch.flexmark:flexmark:0.62.2'
    implementation('com.vdurmont:emoji-java:5.1.1') {
        exclude group: 'org.json', module: 'json'
    }
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'com.github.K1rakishou:Fuck-Storage-Access-Framework:v1.1'
    implementation 'com.github.franmontiel:PersistentCookieJar:v1.0.1'
}

task downloadArchives {
    try {
        download {
            src 'https://4chenz.github.io/archives.json/archives.json'
            dest projectDir.path + File.separator + "src" + File.separator + "main" + File.separator + "assets"
        }
    } catch (Exception ignored) {
    }
}
preBuild.dependsOn downloadArchives
